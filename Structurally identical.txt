Structurally identical
Send Feedback
Given two generic trees, return true if they are structurally identical. Otherwise return false.
Structural Identical
If the two given trees are made of nodes with the same values and the nodes are arranged in the same way, then the trees are called identical.  
Input format :
The first line of input contains data of the nodes of the first tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space.  
The following line of input contains data of the nodes of the second tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space.
Output format :
The first and only line of output contains true, if the given trees are structurally identical and false, otherwise.
Constraints:
Time Limit: 1 sec
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
10 3 20 30 40 2 40 50 0 0 0 0
Sample Output 1 :
true
Sample Input 2 :
10 3 20 30 40 2 40 50 0 0 0 0 
10 3 2 30 40 2 40 50 0 0 0 0
Sample Output 2:
false



/************************************************************
 
    Following is the structure for the TreeNode class

    template <typename T>
    class TreeNode {
     public:
        T data;
        vector<TreeNode<T>*> children;
    
        TreeNode(T data) {
            this->data = data;
        }
    
        ~TreeNode() {
            for (int i = 0; i < children.size(); i++) {
                delete children[i];
            }
        }
    };

************************************************************/

bool areIdentical(TreeNode<int> *root1, TreeNode<int> * root2) {
  /*  if(root1 == NULL && root2 == NULL){
        return true;
    }
   /* int c = 0;
    int m = 0;
    for(int i = 0 , j = 0 ; i< root1->children.size() && j < root2->children.size() ; i++  , j++){
        c++;
        m++;
        bool a = c + m + areIdentical(root1->children[i] , root2->children[i]);
        if(c == m){
            return true;
        }
    }
    return false;*/
   /* if(root1->children.size() == root2->children.size()){
        return true;
    }
     for(int i = 0 , j = 0 ; i< root1->children.size() && j < root2->children.size() ; i++  , j++){
         bool a = areIdentical(root1->children[i] , root2->children[i]);
         if(a != true){
             return false;
         }
     }
    return false;*/


    // Edge case:
    if(root1 == NULL && root2 == NULL){
        return true;
    }
    if(root1 == NULL || root2 == NULL){
        return false;
    }
    // Induction Step(Small Calculation):
    if(root1->children.size() != root2->children.size()){
        return false;
    }
    bool check;
    if(root1->data == root2->data){
        check = true;
    }
    else{
        return false;
    }
    // Base Case + Inductive Hypothesis(Recursive Call);
    for(int i = 0 ; i<root1->children.size() && i<root2->children.size(); i++){
        bool iris = areIdentical(root1->children[i], root2->children[i]);
        // Induction Step(Small Calculation):
        if(iris == true){
            check = true;
        }
        else{
            check = false;
            return check; // jab yahin mera answer mila to aage kyun jana h yahin function end kar do.
        }
    } 
    return check;
}


// Main Code:

#include <iostream>
#include <queue>
#include <vector>
using namespace std;

template <typename T>
class TreeNode {
   public:
    T data;
    vector<TreeNode<T>*> children;

    TreeNode(T data) { this->data = data; }

    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
};

#include "solution.h"

TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);

    queue<TreeNode<int>*> pendingNodes;

    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }

    return root;
}

int main() {
    TreeNode<int>* root1 = takeInputLevelWise();
    TreeNode<int>* root2 = takeInputLevelWise();
    cout << (areIdentical(root1, root2) ? "true" : "false");
}